#include <Foundation/Foundation.h>
#include "LunarCalendarDate.h"

int FirstYear = 1998, LastYear = 2031;

int SolarTable[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

int SolarDays[28] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365, 396, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366, 397};

int LunarTable[34][17] = {
  { 27,  5, 3, 43, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1 },
  { 46,  0, 4, 48, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 }, /* 1999 */
  { 35,  0, 5, 53, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 }, /* 2000 */ 
  { 23,  4, 0, 59, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
  { 42,  0, 1,  4, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
  { 31,  0, 2,  9, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
  { 21,  2, 3, 14, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 }, /* 2004 */
  { 39,  0, 5, 20, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
  { 28,  7, 6, 25, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
  { 48,  0, 0, 30, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
  { 37,  0, 1, 35, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 }, /* 2008 */
  { 25,  5, 3, 41, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
  { 44,  0, 4, 46, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
  { 33,  0, 5, 51, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
  { 22,  4, 6, 56, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 }, /* 2012 */
  { 40,  0, 1,  2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
  { 30,  9, 2,  7, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
  { 49,  0, 3, 12, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1 },
  { 38,  0, 4, 17, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0 }, /* 2016 */
  { 27,  6, 6, 23, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
  { 46,  0, 0, 28, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0 },
  { 35,  0, 1, 33, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
  { 24,  4, 2, 38, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 }, /* 2020 */
  { 42,  0, 4, 44, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
  { 31,  0, 5, 49, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },
  { 21,  2, 6, 54, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
  { 40,  0, 0, 59, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 }, /* 2024 */
  { 28,  6, 2,  5, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
  { 47,  0, 3, 10, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1 },
  { 36,  0, 4, 15, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
  { 25,  5, 5, 20, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 }, /* 2028 */
  { 43,  0, 0, 26, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
  { 32,  0, 1, 31, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0 },
  { 22,  3, 2, 36, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0 }
};

#define isLeapYear(year) (((year % 4) == 0 && ((year % 100) != 0)) | (year % 400) == 0)

@implementation LunarCalendarDate
- (void) setDate: (NSCalendarDate *) date;
{
  int year = [date yearOfCommonEra];
  int month = [date monthOfYear];
  int day = [date dayOfMonth];
  int y, acc, leap;
  int lunarYear;
  int sm;
  int l1=0, l2=0, i, im;

  leap = isLeapYear(year)? 1: 0;

  sm = month - 1;

  y = year - FirstYear;
  acc = SolarDays[leap*14+sm] + day;

  if (acc <= LunarTable[y][0])
    {
      y--;
      lunarYear = year-1;
      leap = isLeapYear(lunarYear)? 1:0;
      sm += 12;
      acc = SolarDays[leap*14+sm] + day;
    }
  else
    {
      lunarYear = year;
    }

  l1 = LunarTable[y][0];
  for (i = 0; i < 13; i++) 
    {
      l2 = l1 + LunarTable[y][i+4] + 29;
      if (acc <= l2) break;
      l1 = l2;
    }
  lunarMonth = i + 1;
  lunarDay = acc - l1;
  im = LunarTable[y][1];
  if (im != 0 && lunarMonth > im) {
    lunarMonth--;
    //if (lunarMonth == im) lunarMonth = -im;
  }
  if (lunarMonth > 12) lunarMonth -= 12;
}

- (int) monthOfYear
{
  return lunarMonth;
}

- (int) dayOfMonth
{
  return lunarDay;
}

@end
